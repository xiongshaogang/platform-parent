<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	                    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	                    http://www.springframework.org/schema/tx 
	                    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
	                    http://www.springframework.org/schema/jee 
	                    http://www.springframework.org/schema/jee/spring-jee-3.0.xsd 
	                    http://www.springframework.org/schema/context 
	                    http://www.springframework.org/schema/context/spring-context-3.0.xsd
	                    http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
	default-lazy-init="true">

	<description>Spring公共配置 </description>
    <!-- 使用AspectJ方式配置AOP 支持注释 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<!-- 使用AspectJ方式配置AOP 支持传统配置方式-->
	<aop:config proxy-target-class="true" />
	<!-- 定义受环境影响易变的变量 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<!-- 标准配置 
				<value>classpath*:/application.properties</value>-->
				<value>classpath*:/application.properties</value>
			</list>
		</property>
	</bean>

	<!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
	<context:component-scan base-package="com.dvn" />
	
	<!-- 数据源配置,使用应用内的DBCP数据库连接池 -->
	<bean id="telemedicinenew" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<!-- Connection Info -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- Connection Pooling Info -->
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<property name="maxActive" value="${dbcp.maxActive}" />
		<property name="defaultAutoCommit" value="false" />
		<property name="timeBetweenEvictionRunsMillis" value="3600000" />
		<property name="minEvictableIdleTimeMillis" value="3600000" />
	</bean>
	
	<!-- JdbcTemplate -->
	<!--<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="telemedicine"/>
    </bean>-->
	
	<!-- 数据源配置,使用应用服务器的数据库连接池 -->
	<!--<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/ExampleDB" />-->
    <!--DbContextHolder.putDataSourceName(GlobalKeys.YJW_DATABASE_KEY); at controller 切换-->
   <bean id="dataSource" class="com.dvn.telemedicine.util.DynamicDataSource">  
          <property name="targetDataSources">  
             <map key-type="java.lang.String">  
                <entry key="telemedicinenew" value-ref="telemedicinenew"/>
             </map>  
          </property>  
          <property name="defaultTargetDataSource" ref="telemedicinenew"/>  
   </bean> 
   
	<!-- Hibernate配置 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
			</props>
		</property>
		<property name="packagesToScan" value="com.dvn.telemedicine.entity" />
	</bean>

	<!-- ====================== AOP拦截配置   ======================= -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
	  <property name="configLocation">
	    <value>classpath:ehcache/ehcache.xml</value>
	  </property>
	</bean>
	
	
	
	<!-- 事务管理器配置,单数据源事务 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	

	
	<!--<bean id="springContextHolder" class="org.springside.modules.utils.spring.SpringContextHolder" lazy-init="false" />  -->
	

	
	<!-- 24项算法队列  线程池-->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数 -->
		<property name="corePoolSize" value="10" />
		<!-- 最大线程数 -->
		<property name="maxPoolSize" value="50" />
		<!-- 最大队列数 -->
		<property name="queueCapacity" value="10000" />
		<!-- 线程池维护线程所允许的空闲时间 -->
		<property name="keepAliveSeconds" value="60" />
	</bean>
	
	<!-- telemedicine-core的算法类以及文案类的生成 -->
	<bean id="telemedicineAnalyzer" class="com.dvn.telemedicine.core.TelemedicineAnalyzerImpl" lazy-init="false">
		<property name="writerManager" ref="writerManager"></property>
	</bean>
	
	<bean id="writerManager" class="com.dvn.telemedicine.core.cache.WriterManager">
		<property name="isUseLocalCache" value="true"></property>
		<property name="cache" ref="writerLocalCacheManager"></property>
		<property name="client">
			<bean factory-bean="memcachedClientFactoryBean" factory-method="getClient"></bean>
		</property>
	</bean>
	
	<bean id="memcachedClientFactoryBean" class="com.dvn.telemedicine.core.cache.MemcacheClientFactoryBean">
		<property name="host" value="114.215.179.133"></property>
		<property name="port" value="11211"></property>
		<property name="poolSize" value="5"></property>
		<property name="operateTimeOut" value="5000"></property>
	</bean>
	
	<bean id="writerCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
	  <property name="cacheManager">
	    <ref local="cacheManager"/>
	  </property>
	  <property name="cacheName">
	    <value>com.dvn.telemedicine.core.writer</value>
	  </property>
	</bean>
	
	<bean id="writerLocalCacheManager" class="com.dvn.telemedicine.util.WriterLocalCacheManager">
		<property name="cache">
	    <ref local="writerCache" />
	  </property>
	</bean>
	
</beans>